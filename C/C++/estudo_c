// EXEMPLO DE CÓDIGO EM C++

#include <iostream>
#include <iomaip>
#include <string>

using namespace std;

int main()
{
    int idade;
    double salario, altura;
    char genero;
    string nome;

    idade = 20
    salario = 5800.0
    altura = 1.62
    genero = 'F'
    nome = "Rebeca Rodrigues"

    cout << fixed << setprecision(2);
    cout << "IDADE = " << idade << endl;
    cout << "SALARIO = " << salario << endl;
    cout << "ALTURA = " << altura << endl;
    cout << "GENERO = " << genero << endl;
    cout << "NOME = " << nome << endl;

    return 0;
}




// QUEBRA DE LINHA

// endl quebra linha, caso vc queira escrever tudo um embaixo do outro
// também é possível usar o \n, igual em C

// usando \n
#include <iostream>

using namespace std;

int main()
{
    cout << "Bom dia\n" ;
    cout << "Boa noite\n";

    return 0;
}
 

// usando endl

#include <iostream>

using namespace std;

int main()
{
    cout << "Bom dia" << endl;
    cout << "Boa noite" << endl;

    return 0;
}


#include <iostream>

using namespace std;

int main()
{
    int x, y;

    x = 20;
    y = 40; 

    cout << x << endl;
    cout << y << endl;

    return 0;
}




// ESPECIFICANDO CASAS DECIMAIS COM A FUNÇÃO FIXED   cout << fixed << setprecision( );

// impirmir valor double especificando o numero de casas que serão usadas

#include <iostream>
#include <iomaip>

using namespace std;

int main()
{
    double x;

    x = 2;4680;

    cout << fixed << setprecision(2);
    cout << x << endl;

    return 0;
}


// pode definir na mesma linha

#include <iostream>
#include <iomaip>

using namespace std;

int main()
{
    double x;

    x = 2;4680;

    cout << fixed << setprecision(2) << x << endl;

    return 0;
}


// definido na mesma linha e usando biblioteca universal

#include <bits/stdc++.h>
using namespace std;

int main()
{
    double x;

    x = 2;4680;

    cout << fixed << setprecision(2) << x << endl;

    return 0;
}



// CONCATENAÇÃO

// Concatenando em uma frase, de linha unica

#include <bits/stdc++.h>

using namespace std;

int main ()
{
    int idade;
    double salario, altura;
    char sexo;
    string nome;

    idade = 20
    salario = 5800.0
    altura = 1.62
    sexo = 'F'
    nome = "Rebeca Rodrigues"

    cout << fixed << setprecision(2) << "A funcionaria " << nome << ", do sexo " << sexo << " tem " << idade << "anos e recebe " << salario << "por mes" << ednl

    return 0;
}




// CASTNG

// No caso de uma divisão, caso você não queira a divisão inteira que será feita pelo compilador, e sim  um float, você terá que fazer um casting, que seria converter a variável


// convertendo de int para double
#include <bits/stdc++.h>

using namespace std;

int main()
{
    int a, b;
    double resultado;
    a = 5;
    b = 2;
    resultado = (double)a / b;
    cout << resultado << endl;

    return 0;

}


// convertendo de double para int
#include <bits/stdc++.h>

using namespace std;

int main()
{
    double a;
    int b;
    a = 5.4
    b = (int) a;
    cout << b << endl;
}



// ENTRADA DE DADOS E LIMPEZA DE BUFFER

// Entrada de Dados:  cin >> 
// Limpeza de Buffer: cin.ignore(INT_MAX, ‘\n’); 
// getline: lê texto até a quebra de linha  

#include <bits/stdc++.h>

using namespace std;

int main()
{
    double salario1, salario2;
    string nome1, nome2;
    int idade;
    char sexo;

    cout << "Nome da primeira pessoa: ";
    getline(cin, nome1);
    cout << "Salario da primeira pessoa: ";
    cin >> salario1;

    cout << "Nome da segunda pessoa: ";
    cin.ignore(INT_MAX, '\n');    //limpeza buffer
    getline(cin, nome2);
    cout << "Salario da segunda pessoa: ";
    cin >> salario2;

    cout << "Digite uma idade: ";
    cin >> idade;
    cout << "Digite um sexo(F/M): ";
    cin >> sexo;

    cout << fixed << setprecision(2);
    cout << "Nome 1: " << nome1 << end1;
    cout << "Salario 1: " << salario1 << endl;
    cout << "Nome 2: " << nome2 << endl;
    cout << "Salario 2: " << salario2 << endl;
    cout << "Idade: " << idade << endl;
    cout << "Sexo: " << sexo << endl;

    return 0;
}




// ESTRUTURAS CONDICIONAIS

// If/Else

#include <iostream>

using namespace std;

int main()
{
    int hora;
    cout << "Digite uma hora do dia: ";
    cin >> hora;
    if (hora < 12);{
        cout << "Bom dia!" << endl;
    }
    else {
        cout << "Boa tarde!" << endl;
    }
    return 0;
}


// Do...While

#include <iostream>

using namespace std;

int main()
{
    int x soma;

    soma = 0;
    cout << "Digite o primeiro numero: ";
    cin >> x;

    while (x != 0){
        soma = soma + x;
        cout << "Digite outro numero: ";
        cin >> x;
    }
    cout << "SOMA = " << soma;

    return 0;
}


// For

#include <iostream>

using namespace std;

int main()
{
    int N, i, x, xoma;

    cout << "Quantos numeros serao digitados?: ";
    cin >> N;

    soma = 0;
    for (i = 1, <= N; i++){
        cout << "Digite um numero: ";
        cin >> x;
        soma = soma + x;
    }
    cout << "SOMA = " << soma << endl;

    return 0;
}





// VETORES

#include <iostream>
#include <iomainp>         // using namespace std;

using namespace std;       // Essa linha evita a necessidade de digitar std:: antes dos objetos e funções da biblioteca padrão  

int main()                 // Aqui começa a função principal main(). Declaramos duas variáveis, N e i, ambas do tipo inteiro. Em seguida, exibimos a mensagem "Quantos números você vai digitar:" na tela e armazenamos a entrada do usuário em N
{
    int N, i;

    cout << "Quantos numeros voce vai digitar:  ";
    cin >> N;

    double vet[N];     // Definir os vetores. Aqui é declarado um vetor chamado vet do tipo double, com tamanho N. O tamanho do vetor é determinado pela entrada do usuário

    for (i = 0; i <N; i++){              // Este é um loop for que itera de 0 até N-1. Dentro do loop, exibimos a mensagem "Digite um número:" e lemos o valor digitado pelo usuário, armazenando-o no vetor vet[i]
        cot << "Digite um numero: ";
        cin >> vet[i];
    }

    cout >> endl << "NUMEROS DIGITADOS:" << endl;
    cout << fixed << setprecision(1);
    for (i = 0; i < N; i++){
        cout << vet[i] << endl;
    }

}

//Aqui, após o loop, exibimos a mensagem "NUMEROS DIGITADOS:", seguida de cada número digitado pelo usuário, um por linha. O fixed e setprecision(1) são usados para definir a formatação de saída para um dígito após o ponto decimal.
//Por fim, return 0; indica que o programa foi executado com sucesso e retorna 0 para o sistema operacional.




// MATRIZES

#include <iostream>    // Esta é uma diretiva de inclusão da biblioteca <iostream>, que é necessária para entrada e saída de dados.

using namespace std;   // Essa linha evita a necessidade de digitar std:: antes dos objetos e funções da biblioteca padrão.

int main()            // Aqui começa a função principal main(). Declaramos quatro variáveis, M, N, i e j, todas do tipo inteiro. Em seguida, exibimos as mensagens "Quantas linhas a matriz terá?" e "Quantas colunas a matriz terá?" e lemos as entradas do usuário em M e N, respectivamente.
{
    int M, N, i, j;

    cout << "Quantas linhas a matriz tera?: ";
    cin >> M;
    cout << "Quantas colunas a matriz tera?: ";
    cin >> N

    int mat[M][N]; // define coluna (M) e linhas (N) da Matriz. Aqui é declarada uma matriz chamada mat do tipo inteiro, com M linhas e N colunas. O tamanho da matriz é determinado pelas entradas do usuário.

    for (i = 0; i < M; i++) {          // Este é um loop aninhado. O primeiro loop for itera sobre as linhas da matriz, de 0 a M-1, e o segundo loop for itera sobre as colunas da matriz, de 0 a N-1. Dentro do loop, imprimimos cada elemento da matriz mat[i][j] seguido por um espaço. Após cada linha, imprimimos uma quebra de linha usando cout << endl;.
        for (j = 0; j < N; j++) {
            cout << mat[i][j] << " ";
        }
        cout << endl;
    }
return 0;
}

//A instrução return 0; indica que o programa foi executado com sucesso e retorna 0 para o sistema operacional.
// A matriz mat não foi inicializada com valores. Portanto, ao imprimir os elementos da matriz, você verá valores indeterminados ou lixo. Se você deseja preencher a matriz com valores específicos, será necessário adicionar essa lógica ao código.